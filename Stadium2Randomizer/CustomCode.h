#pragma once

#include <stdint.h>

template < const uint8_t delaySlot[4],						//op that was in delayslot of hooked jal
		   int additionalNops,								//adds more nops after the redirect, e.g to mask a delay slot
		   const int injectTargetBytes[4],					//4 bytes of redirect code that contains absolute address to jump to
		   unsigned int injectCodeSize,						//size of custom code to be injected
		   const uint8_t injectCode[injectCodeSize] >		//array containing custom code to be injected
class InjectedCode {
private:
	InjectedCode() = delete;
protected:
	//binary of lui at, 0xFFFF; ori at, at, 0xFFFF; jalr at;
	//annotated bytes are target address
	static constexpr uint8_t mipsRegJal[12] = {
		0x3C, 0x01, /*<*/0xFF, 0xFF/*>*/, 0x34, 0x21, /*<*/0xFF, 0xFF,/*>*/0x00, 0x20, 0xF8, 0x09
	};
	static constexpr int mipsRegJal_TargetBytes[4] = { 2,3, 6,7 };
public:


	static uint8_t* CreateRedirect(unsigned int* outSize = nullptr) {		//builds out of mipsRegJal and the specific delay slot
		uint8_t* buf = new uint8_t[16 + additionalNops*4];
		memcpy_s(buf, 12, mipsRegJal, 12);
		memcpy_s(buf + 12, 4, delaySlot, 4);
		if (additionalNops > 0) {
			memset(buf + 16, 0, additionalNops*4);
		}
		if (outSize != nullptr) *outSize = 16 + additionalNops * 4;
		return buf;
	}

	static void SetRedirectTarget(uint8_t* buf, uint32_t replacement) {
		buf[mipsRegJal_TargetBytes[0]] = replacement >> 24 & 0xFF;
		buf[mipsRegJal_TargetBytes[1]] = replacement >> 16 & 0xFF;
		buf[mipsRegJal_TargetBytes[2]] = replacement >> 8 & 0xFF;
		buf[mipsRegJal_TargetBytes[3]] = replacement >> 0 & 0xFF;
	}

	static uint8_t* CreateInjection(unsigned int* outSize = nullptr) {
		uint8_t* buf = new uint8_t[injectCodeSize];
		memcpy_s(buf, injectCodeSize, injectCode, injectCodeSize);
		if (outSize != nullptr) *outSize = injectCodeSize;
		return buf;
	}

	static void SetInjectionTableAddress(uint8_t* buf, uint32_t tableAddr) {
		buf[injectTargetBytes[0]] = tableAddr >> 24 & 0xFF;
		buf[injectTargetBytes[1]] = tableAddr >> 16 & 0xFF;
		buf[injectTargetBytes[2]] = tableAddr >> 8 & 0xFF;
		buf[injectTargetBytes[3]] = tableAddr >> 0 & 0xFF;
	}

};

///////////////

constexpr uint32_t rentalRedirectAdr = 0xFA740;
constexpr uint8_t rentalDelaySlot[4] = {
	0x00, 0x40, 0x28, 0x25 //or a1, v0, r0
};
//annotated bytes are custom rental table address
constexpr uint8_t rentalLoadInjection[216] = {
	0x3C, 0x09, 0x80, 0x14, 0x35, 0x29, 0x51, 0xD0, 0x95, 0x29, 0x00, 0x00,
	0x3C, 0x08, /*<*/0xDF, 0xFF,/*>*/ 0x35, 0x08, /*<*/0xFF, 0xFF,/*>*/ 0x8D, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x2A, 0x08, 0x23, 0x04, 0x20, 0xFF, 0xFC,
	0x25, 0x08, 0x00, 0x0C, 0x25, 0x08, 0xFF, 0xF4, 0x8D, 0x09, 0x00, 0x04,
	0x8D, 0x0A, 0x00, 0x08, 0x25, 0x29, 0x00, 0x01, 0x11, 0x20, 0x00, 0x19,
	0x25, 0x29, 0xFF, 0xFF, 0x00, 0x05, 0x59, 0x00, 0x00, 0x8B, 0x60, 0x21,
	0x27, 0xBD, 0xFF, 0xF0, 0xAF, 0xB0, 0x00, 0x00, 0xAF, 0xB1, 0x00, 0x04,
	0xAF, 0xAC, 0x00, 0x08, 0xAF, 0xBF, 0x00, 0x0C, 0x8D, 0x90, 0x00, 0x10,
	0x8D, 0x91, 0x00, 0x14, 0xAD, 0x89, 0x00, 0x10, 0xAD, 0x8A, 0x00, 0x14,
	0x3C, 0x08, 0x80, 0x07, 0x25, 0x08, 0x1B, 0x20, 0x01, 0x00, 0xF8, 0x09,
	0x00, 0x00, 0x00, 0x00, 0x8F, 0xAC, 0x00, 0x08, 0xAD, 0x90, 0x00, 0x10,
	0xAD, 0x91, 0x00, 0x14, 0x8F, 0xB0, 0x00, 0x00, 0x8F, 0xB1, 0x00, 0x04,
	0x8F, 0xBF, 0x00, 0x0C, 0x27, 0xBD, 0x00, 0x10, 0x10, 0x00, 0x00, 0x09,
	0x00, 0x00, 0x00, 0x00, 0x27, 0xBD, 0xFF, 0xFC, 0xAF, 0xBF, 0x00, 0x00,
	0x3C, 0x08, 0x80, 0x07, 0x25, 0x08, 0x1B, 0x20, 0x01, 0x00, 0xF8, 0x09,
	0x00, 0x00, 0x00, 0x00, 0x8F, 0xBF, 0x00, 0x00, 0x27, 0xBD, 0x00, 0x04,
	0x26, 0x01, 0x7F, 0xFF, 0xAC, 0x22, 0x21, 0x79, 0x3C, 0x08, 0x80, 0x00,
	0x25, 0x08, 0x2B, 0x24, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
};

constexpr int rentalLoadInjection_TableAddrBytes[4] = {14, 15, 18, 19};

///////////////

constexpr uint32_t itemRedirectAdr = 0xD9630; //until excluding 68C
constexpr uint8_t itemDelaySlot[4] = {
	0x00,0x00,0x00,0x00 //nops, no delay slot needed
};
constexpr uint8_t itemLoadInjection[164] = {
	0x27, 0xBD, 0xFF, 0xF0, 0xAF, 0xBF, 0x00, 0x0C, 0xAF, 0xB2, 0x00, 0x08,
	0xAF, 0xB3, 0x00, 0x04, 0xAF, 0xB4, 0x00, 0x00, 0x3C, 0x09, 0x80, 0x14,
	0x35, 0x29, 0x51, 0xD0, 0x95, 0x29, 0x00, 0x00, 0x3C, 0x08, /*<*/0xDF, 0xFF,/*>*/
	0x35, 0x08, /*<*/0xFF, 0xFF,/*>*/ 0x8D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x2A, 0x08, 0x23, 0x04, 0x20, 0xFF, 0xFC, 0x25, 0x08, 0x00, 0x08,
	0x25, 0x08, 0xFF, 0xF8, 0x8D, 0x12, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	0x8E, 0x53, 0x00, 0x00, 0x26, 0x52, 0x00, 0x04, 0x34, 0x14, 0x00, 0x18,
	0x02, 0x93, 0x48, 0x06, 0x31, 0x29, 0x00, 0xFF, 0x11, 0x20, 0x00, 0x0A,
	0x8F, 0xA1, 0x00, 0x0C, 0x02, 0x00, 0x20, 0x25, 0x01, 0x20, 0x28, 0x25,
	0x24, 0x21, 0xFF, 0x20, 0x00, 0x20, 0xF8, 0x09, 0x02, 0x20, 0x30, 0x25,
	0x12, 0x80, 0xFF, 0xF3, 0x26, 0x94, 0xFF, 0xF8, 0x10, 0x00, 0xFF, 0xF4,
	0x00, 0x00, 0x00, 0x00, 0x8F, 0xB4, 0x00, 0x00, 0x8F, 0xB3, 0x00, 0x04,
	0x8F, 0xB2, 0x00, 0x08, 0x8F, 0xBF, 0x00, 0x0C, 0x27, 0xBD, 0x00, 0x10,
	0x03, 0xE0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
};


constexpr int itemLoadInjection_TableAddrBytes[4] = { 34,35, 38,39 };


typedef InjectedCode 
		< rentalDelaySlot, 1,
		 rentalLoadInjection_TableAddrBytes, sizeof(rentalLoadInjection), rentalLoadInjection >
	InjectedRental;
	

typedef InjectedCode
		< itemDelaySlot, 19,
		 itemLoadInjection_TableAddrBytes, sizeof(itemLoadInjection), itemLoadInjection >
	InjectedItem;